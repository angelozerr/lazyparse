{#capture fullname}
{#for expanded in e.expand()}
    {#if !expanded.recoverUntil }
    {#if expanded.patternChars.size == 1}
    if (stream.advanceIfChar('{expanded.patternChars[0]}')) { 
    {#else if expanded.patternChars.size > 1}
    if (stream.advanceIfChars(new int[]{ {#for char in expanded.patternChars}'{char}'{#if char_hasNext},{/if}{/}})) {
    {/if}    
    {#if expanded.nextState}
      state = ScannerState.{expanded.nextState};
      {/if}
      {#if expanded.tokenName}
      return finishToken(offset, TokenType.{expanded.tokenName});
    {/if}
        {#include $fullname e=expanded /}
    }    
    {#else}    
    {#if expanded.patternChars.size == 1}
    stream.advanceUntilChar('{expanded.patternChars[0]}');
    {#else if expanded.patternChars.size > 1}
    stream.advanceUntilChars(new int[]{ {#for char in expanded.patternChars}'{char}'{#if char_hasNext},{/if}{/}});
    {/if}
      {#if expanded.nextState}
      state = ScannerState.{expanded.nextState};
      {/if}
      {#if expanded.tokenName}
      return finishToken(offset, TokenType.{expanded.tokenName});
    {/if}
    {/if}
                 
{/for}
{/capture}
package {packageName};

import {scannerApiPackageName}.Scanner;
import {scannerApiPackageName}.AbstractScanner;

public class {className} extends AbstractScanner<TokenType, ScannerState> {
    
	public static Scanner<TokenType, ScannerState> createScanner(String input) {
		return createScanner(input, 0);
	}

	public static Scanner<TokenType, ScannerState> createScanner(String input, int initialOffset) {
		return createScanner(input, initialOffset, ScannerState.WithinContent);
	}

	public static Scanner<TokenType, ScannerState> createScanner(String input, int initialOffset,
			ScannerState initialState) {
		return new TemplateScanner(input, initialOffset, initialState);
	}

	{className}(String input, int initialOffset, ScannerState initialState) {
		super(input, initialOffset, initialState, TokenType.Unknown, TokenType.EOS);
	}

    @Override
    protected TokenType internalScan() {
      int offset = stream.pos();
      if (stream.eos()) {
        return finishToken(offset, TokenType.EOS);
      }
      String errorMessage = null;
      switch (state) {
      {#for state in grammar.states}

        case {state}: {
        {#include $fullname e=grammar.getRulesByWhithinState(state)/}
        }
{/for}
      }
      return finishToken(offset, TokenType.Unknown, errorMessage);
    }

}