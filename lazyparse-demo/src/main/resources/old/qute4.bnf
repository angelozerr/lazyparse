// Root rule: a template is a sequence of various elements
Template             ::= ( Comment | CDATA | Section | Expression | Tag | Text )*

// === Plain text outside expressions, sections, tags, etc.
Text                 ::= @whenState(TEXT) ~[^\\{<]+

// === Expression: {{ ... }}
// Lazy scanning â€” don't parse inner tokens yet
Expression           ::= @whenState(TEXT) @pushState(EXPRESSION) "{{" @lazy @recoveryUntil("}}") "}}" @popState

// === Section: {#name ... {/name}
// Lazy parsing of content until closing tag
Section              ::= @whenState(TEXT) @pushState(SECTION) "{#" SectionName @lazy @recoveryUntil("{/") "{/" SectionName "}" @popState

// Section names: identifiers like "if", "each", etc.
SectionName          ::= ~[a-zA-Z_][a-zA-Z0-9_]*

// === Comment block: {!-- ... --}
// Content inside is skipped lazily until closing delimiter
Comment              ::= @whenState(TEXT) "{!--" @lazy @recoveryUntil("--}") "--}"

// === CDATA block: {![CDATA[ ... ]]}
// Rare in practice but syntactically valid
CDATA                ::= @whenState(TEXT) "{![CDATA[" @lazy @recoveryUntil("]]}") "]]}"

// === HTML-like tag (e.g. <div>, <input>)
// The tag is scanned until '>', content is skipped
Tag                  ::= @whenState(TEXT) "<" TagName @lazy @recoveryUntil(">") ">"

// Tag name starts with letter, supports namespaces (e.g. html:div)
TagName              ::= ~[a-zA-Z_:][a-zA-Z0-9_:\\-]*

// === Fallback rule for unexpected characters (e.g. lone '}')
Unknown              ::= @whenState(TEXT) .
